version: "1"

# Service metadata used by DevOps to build, push, and deploy to ECS
service:
  name: mcp-jira-slack-gmail
  description: "MCP server exposing Jira, Gmail, and Slack tools over SSE on :8000"

image:
  repository: mlops/mcp-jira-slack-gmail            # ECR repo name (DevOps may create/manage)
  dockerfile: Dockerfile
  context: .
  tag: latest                                 # Override in CI as needed (e.g., git sha)
  platforms:
    - linux/arm64

runtime:
  # Container runtime defaults (Fargate-compatible)
  cpu: 256                                    # vCPU units
  memory: 512                                  # MiB
  port: 8000
  protocol: http
  entrypoint: ["python", "server.py"]
  user: appuser

logging:
  driver: awslogs
  options:
    awslogs-group: "/ecs/mcp-jira-slack"    # Ensure log group exists or is created by IaC
    awslogs-region: "${AWS_REGION}"               # Provided by CI/runner
    awslogs-stream-prefix: "app"

ecs:
  # Values below may be overridden by your pipeline/IaC
  cluster: "${ECS_CLUSTER}"                      # e.g., apps-prod
  launch_type: FARGATE
  platform_version: "1.4.0"
  network_mode: awsvpc
  desired_count: 1
  assign_public_ip: false                         # Set true if deploying without internal LB
  subnets: ["${SUBNET_A}", "${SUBNET_B}"]
  security_groups: ["${SG_ID}"]

  task_definition:
    family: mcp-jira-slack-gmail
    execution_role_arn: "${ECS_EXECUTION_ROLE_ARN}"
    task_role_arn: "${ECS_TASK_ROLE_ARN}"
    cpu: 1
    memory: 2048

    container_definitions:
      - name: mcp_jira_slack_gmail_image
        image: "${ECR_URI}/mcp-jira-slack-gmail:${IMAGE_TAG:-latest}"
        essential: true
        portMappings:
          - containerPort: 8000
            protocol: tcp
        secrets:
          # Optionally source these from SSM/Secrets Manager; DevOps to wire actual ARNs/paths
          - name: JIRA_BASE_URL
            valueFrom: "${SSM_JIRA_BASE_URL_PARAM}"
          - name: JIRA_EMAIL
            valueFrom: "${SSM_JIRA_EMAIL_PARAM}"
          - name: JIRA_API_TOKEN
            valueFrom: "${SM_JIRA_API_TOKEN_ARN}"
          - name: SLACK_BOT_TOKEN
            valueFrom: "${SM_SLACK_BOT_TOKEN_ARN}"
        logConfiguration:
          logDriver: awslogs
          options:
            awslogs-group: "/ecs/mcp-jira-gmail-slack"
            awslogs-region: "${AWS_REGION}"
            awslogs-stream-prefix: "app"
        healthCheck:
          # FastMCP serves SSE at /sse; use a TCP-level health check to avoid hanging HTTP requests
          command:
            - CMD-SHELL
            - python -c "import socket,sys; s=None\n\nimport time\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n; import socket as so; import sys as sy;\ntry:\n s=so.create_connection(('127.0.0.1',8000),2)\n s.close()\n sys.exit(0)\nexcept Exception as e:\n sys.exit(1)"
          interval: 30
          timeout: 5
          retries: 3
          startPeriod: 10

  load_balancer:
    enabled: false                                # If true, DevOps will attach an ALB/NLB
    type: alb
    listener_port: 80
    target_port: 8000
    health_check:
      protocol: TCP                               # Prefer TCP because /sse is long-lived
      path: "/"                                   # Ignored for TCP health checks
      interval: 30
      timeout: 5
      healthy_threshold: 2
      unhealthy_threshold: 2

# CI helpers (optional). DevOps can ignore if not used.
ci:
  pre_build:
    - echo "Logging in to ECR"
    - aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_URI}
  build:
    - docker build -f Dockerfile -t ${ECR_URI}/mcp-jira-gmail-slack:${IMAGE_TAG:-latest} .
  post_build:
    - docker push ${ECR_URI}/mcp-jira-gmail-slack:${IMAGE_TAG:-latest}
